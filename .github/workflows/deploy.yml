name: D√©ploiement Continu du Portfolio (React & Symfony)

# D√©clenche le workflow √† chaque push sur la branche 'main'
# Vous pouvez ajuster cela si votre branche de d√©ploiement est diff√©rente
on:
  push:
    branches:
      - main

jobs:
  # Job pour le d√©ploiement du Front-end (React)
  deploy-frontend:
    runs-on: ubuntu-latest # Utilise un runner GitHub h√©berg√© sur Ubuntu

    steps:
      - name: üóÇÔ∏è Checkout du code du d√©p√¥t
        uses: actions/checkout@v4 # Action pour r√©cup√©rer le code de votre d√©p√¥t GitHub

      - name: üü¢ Configuration de Node.js
        uses: actions/setup-node@v4 # Action pour installer Node.js
        with:
          node-version: '20' # Utilisez une version LTS stable de Node.js, par exemple '20' ou '22'
          cache: 'npm' # Active la mise en cache des d√©pendances npm pour des builds plus rapides
          cache-dependency-path: projet-1/package-lock.json # Chemin vers votre fichier lock pour le cache

      - name: üì¶ Installation des d√©pendances du Front-end (React)
        working-directory: ./projet-1 # Navigue vers le dossier de votre application React
        run: npm install # Ex√©cute npm install pour installer les d√©pendances

      - name: üèóÔ∏è Construction du Front-end (React)
        working-directory: ./projet-1 # S'assure d'√™tre dans le bon r√©pertoire pour le build
        run: npm run build # Ex√©cute la commande de build de React (cr√©e le dossier 'build')

      - name: üöÄ D√©ploiement du Front-end vers Hostinger via FTP
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER }} # L'adresse de votre serveur Hostinger
          user: ${{ secrets.FTP_USERNAME }} # Votre nom d'utilisateur Hostinger
          password: ${{ secrets.FTP_PASSWORD }} # Votre mot de passe Hostinger
          localDir: 'projet-1/build' # Le dossier local √† transf√©rer
          remoteDir: '/public_html' # Le dossier cible sur Hostinger

  # Job pour le d√©ploiement du Back-end (Symfony) - TEMPORAIREMENT D√âSACTIV√â
  # deploy-backend:
  #   runs-on: ubuntu-latest # Utilise un runner GitHub h√©berg√©
  #   needs: deploy-frontend # Ce job ne commencera qu'apr√®s que 'deploy-frontend' soit termin√© avec succ√®s

  #   steps:
  #     - name: üóÇÔ∏è Checkout du code du d√©p√¥t
  #       uses: actions/checkout@v4 # R√©cup√®re le code de votre d√©p√¥t
  # 
  #     - name: üêò Configuration de PHP et Composer
  #       uses: shivammathur/setup-php@v2 # Action pour configurer PHP et Composer
  #       with:
  #         php-version: '8.2' # Mettez la version de PHP compatible avec votre projet Symfony (ex: '8.1', '8.2', '8.3')
  #         extensions: mbstring, pdo_mysql, zip, gd # Ajoutez les extensions PHP n√©cessaires pour Symfony
  #         tools: composer:v2 # Installe Composer v2
  # 
  #     - name: üíª D√©ploiement et Configuration du Back-end (Symfony) via SSH
  #       uses: appleboy/ssh-action@v1.0.0 # Action GitHub pour se connecter et ex√©cuter des commandes via SSH
  #       with:
  #         host: ${{ secrets.SSH_HOST }} # L'adresse IP ou le nom d'h√¥te de votre serveur Hostinger (VPS ou h√©bergement avec SSH)
  #         username: ${{ secrets.SSH_USER }} # Votre nom d'utilisateur SSH sur Hostinger
  #         key: ${{ secrets.SSH_KEY }} # Le contenu de votre cl√© priv√©e SSH (stock√©e dans les secrets GitHub)
  #         port: ${{ secrets.SSH_PORT }} # Le port SSH (g√©n√©ralement 22)
  # 
  #         # Le script bash √† ex√©cuter sur votre serveur Hostinger
  #         script: |
  #           # Backend deployment script will be re-enabled once frontend works
  #           echo "Backend deployment temporarily disabled"
