name: D√©ploiement Continu du Portfolio (React & Symfony)

# D√©clenche le workflow √† chaque push sur la branche 'main'
# Vous pouvez ajuster cela si votre branche de d√©ploiement est diff√©rente
on:
  push:
    branches:
      - main

jobs:
  # Job pour le d√©ploiement du Front-end (React)
  deploy-frontend:
    runs-on: ubuntu-latest # Utilise un runner GitHub h√©berg√© sur Ubuntu

    steps:
      - name: üóÇÔ∏è Checkout du code du d√©p√¥t
        uses: actions/checkout@v4 # Action pour r√©cup√©rer le code de votre d√©p√¥t GitHub

      - name: üü¢ Configuration de Node.js
        uses: actions/setup-node@v4 # Action pour installer Node.js
        with:
          node-version: '20' # Utilisez une version LTS stable de Node.js, par exemple '20' ou '22'
          cache: 'npm' # Active la mise en cache des d√©pendances npm pour des builds plus rapides
          cache-dependency-path: projet-1/package-lock.json # Chemin vers votre fichier lock pour le cache

      - name: üì¶ Installation des d√©pendances du Front-end (React)
        working-directory: ./projet-1 # Navigue vers le dossier de votre application React
        run: npm install # Ex√©cute npm install pour installer les d√©pendances

      - name: üèóÔ∏è Construction du Front-end (React)
        working-directory: ./projet-1 # S'assure d'√™tre dans le bon r√©pertoire pour le build
        run: npm run build # Ex√©cute la commande de build de React (cr√©e le dossier 'build')

      - name: üöÄ D√©ploiement du Front-end vers Hostinger via SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4 # Action GitHub pour le d√©ploiement SFTP (adapt√© pour Hostinger)
        with:
          server: ${{ secrets.FTP_SERVER }} # L'adresse de votre serveur Hostinger
          username: ${{ secrets.FTP_USERNAME }} # Votre nom d'utilisateur Hostinger
          password: ${{ secrets.FTP_PASSWORD }} # Votre mot de passe Hostinger
          local_path: './projet-1/build/*' # Le dossier local √† transf√©rer
          remote_path: '/public_html/' # Le dossier cible sur Hostinger
          sftp_only: true # Force l'utilisation de SFTP

  # Job pour le d√©ploiement du Back-end (Symfony)
  deploy-backend:
    runs-on: ubuntu-latest # Utilise un runner GitHub h√©berg√©
    needs: deploy-frontend # Ce job ne commencera qu'apr√®s que 'deploy-frontend' soit termin√© avec succ√®s

    steps:
      - name: üóÇÔ∏è Checkout du code du d√©p√¥t
        uses: actions/checkout@v4 # R√©cup√®re le code de votre d√©p√¥t

      - name: üêò Configuration de PHP et Composer
        uses: shivammathur/setup-php@v2 # Action pour configurer PHP et Composer
        with:
          php-version: '8.2' # Mettez la version de PHP compatible avec votre projet Symfony (ex: '8.1', '8.2', '8.3')
          extensions: mbstring, pdo_mysql, zip, gd # Ajoutez les extensions PHP n√©cessaires pour Symfony
          tools: composer:v2 # Installe Composer v2

      - name: üíª D√©ploiement et Configuration du Back-end (Symfony) via SSH
        uses: appleboy/ssh-action@v1.0.0 # Action GitHub pour se connecter et ex√©cuter des commandes via SSH
        with:
          host: ${{ secrets.SSH_HOST }} # L'adresse IP ou le nom d'h√¥te de votre serveur Hostinger (VPS ou h√©bergement avec SSH)
          username: ${{ secrets.SSH_USER }} # Votre nom d'utilisateur SSH sur Hostinger
          key: ${{ secrets.SSH_KEY }} # Le contenu de votre cl√© priv√©e SSH (stock√©e dans les secrets GitHub)
          port: ${{ secrets.SSH_PORT }} # Le port SSH (g√©n√©ralement 22)

          # Le script bash √† ex√©cuter sur votre serveur Hostinger
          script: |
            # --- IMPORTANT : MODIFIEZ CES CHEMINS EN FONCTION DE VOTRE H√âBERGEMENT HOSTINGER ---
            #
            # Ce chemin est le r√©pertoire o√π votre application Symfony sera stock√©e sur le serveur.
            # Id√©alement, il devrait √™tre en dehors du r√©pertoire public_html pour des raisons de s√©curit√©,
            # et votre serveur web (Nginx/Apache) devrait √™tre configur√© pour servir le dossier 'public' de Symfony.
            #
            # Exemple pour un VPS : /home/votrenomutilisateur/portfolio_symfony_app
            # Exemple pour un h√©bergement partag√© : /home/uXXXXXXX/votredomaine.com/symfony_api_app (si vous voulez le mettre l√†)
            # ASSUREZ-VOUS QUE CE CHEMIN EST ACCESSIBLE ET AYANT LES BONNES PERMISSIONS
            SYMFONY_PROJECT_PARENT_DIR="/public_html" # Chemin racine Hostinger
            SYMFONY_APP_DIR="$SYMFONY_PROJECT_PARENT_DIR/api" # Chemin vers la racine de votre projet Symfony
            GIT_REPO_URL="https://github.com/MorvinQUERNEL/Portfolio.git"

            echo "Cr√©ation du r√©pertoire parent si inexistant: $SYMFONY_PROJECT_PARENT_DIR"
            mkdir -p $SYMFONY_PROJECT_PARENT_DIR

            echo "V√©rification et clonage/mise √† jour du d√©p√¥t Git..."
            # Clone dans un dossier temporaire pour extraire le backend
            cd /tmp
            rm -rf portfolio_temp
            git clone $GIT_REPO_URL portfolio_temp
            
            echo "Cr√©ation du dossier API: $SYMFONY_APP_DIR"
            mkdir -p $SYMFONY_APP_DIR
            
            echo "Copie du backend Symfony depuis be/app/ vers $SYMFONY_APP_DIR"
            # Copie tout le contenu du dossier be/app/ vers le dossier API
            cp -r portfolio_temp/be/app/* $SYMFONY_APP_DIR/ 2>/dev/null || true
            cp -r portfolio_temp/be/app/.[^.]* $SYMFONY_APP_DIR/ 2>/dev/null || true
            
            # Nettoyage du dossier temporaire
            rm -rf portfolio_temp

            echo "Navigation vers le dossier Symfony: $SYMFONY_APP_DIR"
            cd $SYMFONY_APP_DIR

            echo "Installation des d√©pendances Composer..."
            # Installe les d√©pendances, exclut les d√©pendances de d√©veloppement et optimise l'autoloader
            composer install --no-dev --optimize-autoloader

            echo "Ex√©cution des migrations Doctrine (si vous en avez)..."
            # Ex√©cute les migrations de base de donn√©es. '--no-interaction' √©vite les questions interactives.
            php bin/console doctrine:migrations:migrate --no-interaction

            echo "Nettoyage et r√©chauffement du cache Symfony..."
            # Nettoie et pr√©pare le cache de Symfony pour la production
            php bin/console cache:clear
            php bin/console cache:warmup

            echo "Installation des assets publics de Symfony..."
            # Installe les assets des bundles Symfony dans le dossier 'public'
            php bin/console assets:install public --symlink --relative

            echo "Configuration des permissions (important !)"
            # Ces commandes sont g√©n√©riques et pourraient n√©cessiter des ajustements
            # en fonction de la configuration sp√©cifique de votre serveur Hostinger (utilisateur Apache/Nginx, etc.)
            # Assurez-vous que le r√©pertoire 'var' de Symfony est accessible en √©criture par l'utilisateur du serveur web.
            # Par exemple, pour un utilisateur 'www-data' (souvent Apache/Nginx):
            # sudo setfacl -R -m u:www-data:rwX -m u:$(whoami):rwX var public/build
            # sudo setfacl -dR -m u:www-data:rwX -m u:$(whoami):rwX var public/build
            # chmod -R 775 var/cache var/log
            echo "Veuillez v√©rifier les permissions manuellement sur votre serveur si vous rencontrez des erreurs."
            echo "D√©ploiement du Back-end Symfony termin√© !"
